<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pb.xc.dao.BuyMapper">
	<resultMap id="BaseResultMap" type="com.pb.xc.entity.Buy">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="state" property="state" jdbcType="INTEGER" />
		<result column="time" property="time" jdbcType="TIMESTAMP" />
		<result column="money" property="money" jdbcType="DOUBLE" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, user_id, state, time, money
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.pb.xc.entity.BuyExample">
		select
		<if test="distinct">
			distinct
		</if>
		'true' as QUERYID,
		<include refid="Base_Column_List" />
		from t_buy
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from t_buy
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from t_buy
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.pb.xc.entity.BuyExample">
		delete from t_buy
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.pb.xc.entity.Buy"
		useGeneratedKeys="true" keyProperty="id">
		insert into t_buy ( user_id,
		state,
		time, money)
		values ( #{userId,jdbcType=INTEGER},
		#{state,jdbcType=INTEGER},
		#{time,jdbcType=TIMESTAMP},
		#{money,jdbcType=DOUBLE})
	</insert>
	<insert id="insertSelective" parameterType="com.pb.xc.entity.Buy"
		useGeneratedKeys="true" keyProperty="id">
		insert into t_buy
		<trim prefix="(" suffix=")" suffixOverrides=",">

			<if test="userId != null">
				user_id,
			</if>
			<if test="state != null">
				state,
			</if>
			<if test="time != null">
				time,
			</if>
			<if test="money != null">
				money,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">

			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="state != null">
				#{state,jdbcType=INTEGER},
			</if>
			<if test="time != null">
				#{time,jdbcType=TIMESTAMP},
			</if>
			<if test="money != null">
				#{money,jdbcType=DOUBLE},
			</if>
		</trim>
	</insert>
	<update id="updateByExampleSelective" parameterType="map">
		update t_buy
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.userId != null">
				user_id = #{record.userId,jdbcType=INTEGER},
			</if>
			<if test="record.state != null">
				state = #{record.state,jdbcType=INTEGER},
			</if>
			<if test="record.time != null">
				time = #{record.time,jdbcType=TIMESTAMP},
			</if>
			<if test="record.money != null">
				money = #{record.money,jdbcType=DOUBLE},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update t_buy
		set id = #{record.id,jdbcType=INTEGER},
		user_id =
		#{record.userId,jdbcType=INTEGER},
		state =
		#{record.state,jdbcType=INTEGER},
		time = #{record.time,jdbcType=TIMESTAMP},
		money = #{record.money,jdbcType=DOUBLE}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.pb.xc.entity.Buy">
		update t_buy
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=INTEGER},
			</if>
			<if test="time != null">
				time = #{time,jdbcType=TIMESTAMP},
			</if>
			<if test="money != null">
				money = #{money,jdbcType=DOUBLE},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.pb.xc.entity.Buy">
		update t_buy
		set
		user_id = #{userId,jdbcType=INTEGER},
		state =
		#{state,jdbcType=INTEGER},
		time = #{time,jdbcType=TIMESTAMP},
		money =
		#{money,jdbcType=DOUBLE}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<!--*************************************************查询未处理订单******************************************** -->

	<sql id="queryWaitOrder">
		t.id,
		t.user_id,
		t.state,
		t.time,
		t.money,
		t1.address,
		t1.name,
		t1.tel,
		t1.username
	</sql>

	<select id="queryWaitOrder" resultMap="BaseResultMap2"
		parameterType="java.lang.Integer">
		select
		<include refid="queryWaitOrder" />
		FROM t_buy t
		INNER JOIN t_user t1
		ON t.user_id = t1.id
		WHERE t.state = 1
		ORDER BY t.id desc
		<!-- AND t1.id = #{id,jdbcType=INTEGER} -->
	</select>
	<!--*************************************************查询未处理订单By Name******************************************** -->
	<select id="queryWaitOrderByName" resultMap="BaseResultMap2"
		parameterType="java.lang.String">
		select
		<include refid="queryWaitOrder" />
		FROM t_buy t
		INNER JOIN t_user t1
		ON t.user_id = t1.id
		WHERE t.state = 1

		AND t1.name LIKE
		#{name,jdbcType=VARCHAR}
		ORDER BY t.id desc
	</select>
	<!--*************************************************查询未处理订单 By Tel******************************************** -->
	<select id="queryWaitOrderByTel" resultMap="BaseResultMap2"
		parameterType="java.lang.String">
		select
		<include refid="queryWaitOrder" />
		FROM t_buy t
		INNER JOIN t_user t1
		ON t.user_id = t1.id
		WHERE t.state = 1

		AND t1.tel LIKE
		#{tel,jdbcType=VARCHAR}
		order by t.id desc
	</select>
	<!--*************************************************查询已经处理订单******************************************** -->

	<sql id="queryAllOrder">
		t.id,
		t.user_id,
		t.state,
		t.time,
		t1.money,
		t1.address,
		t1.name,
		t1.tel,
		t1.username
	</sql>

	<select id="queryAllOrder" resultMap="BaseResultMap2"
		parameterType="java.lang.Integer">
		select
		<include refid="queryAllOrder" />
		FROM t_buy t
		INNER JOIN t_user t1
		ON t.user_id = t1.id
		WHERE t.state = 2
		ORDER BY t.id desc
		<!-- AND t1.id = #{id,jdbcType=INTEGER} -->
	</select>
	<!--*************************************************查询已经处理订单By Name******************************************** -->
	<select id="queryAllOrderByName" resultMap="BaseResultMap2"
		parameterType="java.lang.String">
		select
		<include refid="queryAllOrder" />
		FROM t_buy t
		INNER JOIN t_user t1
		ON t.user_id = t1.id
		WHERE t.state = 2

		AND t1.name LIKE
		#{name,jdbcType=VARCHAR}
		ORDER BY t.id desc
	</select>
	<!--*************************************************查询已经处理订单 By Tel******************************************** -->
	<select id="queryAllOrderByTel" resultMap="BaseResultMap2"
		parameterType="java.lang.String">
		select
		<include refid="queryAllOrder" />
		FROM t_buy t
		INNER JOIN t_user t1
		ON t.user_id = t1.id
		WHERE t.state = 2

		AND t1.tel LIKE
		#{tel,jdbcType=VARCHAR}
		order by t.id desc
	</select>

	<!--*************************************************返回值******************************************** -->
	<resultMap id="BaseResultMap2" type="com.pb.xc.controller.vo.BuyVo">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<!-- <result column="goods_id" property="goodsId" jdbcType="INTEGER" /> -->
		<result column="time" property="time" jdbcType="TIMESTAMP" />
		<result column="username" property="username" jdbcType="VARCHAR" />
		<result column="address" property="address" jdbcType="VARCHAR" />
		<result column="tel" property="tel" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="state" property="state" jdbcType="INTEGER" />
		<result column="money" property="money" jdbcType="DOUBLE" />
	</resultMap>
</mapper>